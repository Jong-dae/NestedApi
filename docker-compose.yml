#
# MIT License
#
# Copyright (c) 2020 NestedApi Project
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
version: '3.8'

# Common envoriment variables used in all service containers.
x-common-variables: &common-variables
  - NESTEDAPI_MAX_CONNECTIONS=3
  - NESTEDAPI_AUTH_KEY=${NESTEDAPI_AUTH_KEY}
  - RABBITMQ_AMQP_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@message-bus:5672/%2f

services:
  # API Gateway Service
  gateway:
    container_name: gateway
    image: quay.io/datawire/ambassador:0.86.1
    command: --port 8080
    ports:
      - "8080:8080"
    environment:
      - AMBASSADOR_NO_KUBEWATCH=no_kubewatch
    networks:
      - internal-network
    volumes:
      - ./configs/gateway-config.yml:/ambassador/ambassador-config
  
  # Bus Message Service
  message-bus:
    container_name: message-bus
    image: docker.io/library/rabbitmq:alpine
    environments:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - internal-network

  # Specific Module Service - Authentication
  auth-service:
    container_name: auth-service
    build: ./src/Authentication
    environments: # Command for key generating: openssl rand -base64 172 | tr -d '\n'
      - *common-variables
    deploy:
      replicas: 1
    networks:
      - internal-network

  # Specific Module Service - Payments
  payments-service:
    container_name: payments-service
    build: ./src/Payments
    environments:
      - *common-variables
    deploy:
      replicas: 1
    networks:
      - internal-network
      
  # Specific Module Service - Users
  users-service:
    container_name: users-service
    build: ./src/Users
    environments:
      - JDBC_DATABASE_URL=jdbc:postgresql://users-database.internal-network/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRES_PASSWORD}
      - *common-variables
    deploy:
      replicas: 1
    networks:
      - internal-network

  users-database:
    container_name: users-database
    image: docker.io/library/postgres:alpine
    restart: always
    environments:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - internal-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Specific Module Service - Invoices
  invoices-service:
    container_name: invoices-service
    build: ./src/Invoices
    environments:
      - MONGODB_URI=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@invoices-database:27017/
      - MONGODB_DATABASE=invoices
      - *common-variables
    deploy:
      replicas: 1
    networks:
      - internal-network

  invoices-database:
    container_name: invoices-database
    image: docker.io/library/mongo:latest
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    networks:
      - internal-network
    volumes:
      - mongodb_data:/data/db

networks:
  # Internal Network
  internal-network:
    external: false